"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//loading the icons for parcel to convert them later
class pageView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentContainer", document.querySelector('.pagination'));

    _defineProperty(this, "_errorMessage", "Can't load recipe.");

    _defineProperty(this, "_currentPage", void 0);

    _defineProperty(this, "_totalPage", void 0);
  }

  render(currentPage, totalPage) {
    this._currentPage = currentPage;
    this._totalPage = totalPage;

    this._clear();

    this._parentContainer.insertAdjacentHTML('beforeend', this._renderPagination(currentPage));
  }

  _renderPagination(page) {
    let markup;

    if (page === 1) {
      markup = `
                <button class="btn--inline pagination__btn--next">
                    <span>Page 2</span>
                    <svg class="search__icon">
                        <use href="${_icons.default}#icon-arrow-right"></use>
                    </svg>
                </button>
          
            `;
    } else if (page === this._totalPage) {
      markup = `
                <button class="btn--inline pagination__btn--prev">
                    <svg class="search__icon">
                        <use href="${_icons.default}#icon-arrow-left"></use>
                    </svg>
                    <span>Page ${page - 1}</span>
                </button>
            `;
    } else {
      markup = `
                <button class="btn--inline pagination__btn--prev">
                    <svg class="search__icon">
                        <use href="${_icons.default}#icon-arrow-left"></use>
                    </svg>
                    <span>Page ${page - 1}</span>
                </button>
                <button class="btn--inline pagination__btn--next">
                    <span>Page ${page + 1}</span>
                    <svg class="search__icon">
                        <use href="${_icons.default}#icon-arrow-right"></use>
                    </svg>
                </button>
            `;
    }

    return markup;
  }

  addHandlerPagination(handler) {
    this._parentContainer.addEventListener('click', function (e) {
      if (!e.target.closest('.btn--inline')) return;

      this._clear();

      const pageButton = e.target.closest('.btn--inline');
      pageButton.classList.contains('pagination__btn--next') ? this._currentPage++ : this._currentPage--;
      handler(this._currentPage);
    }.bind(this));
  }

}

var _default = new pageView();

exports.default = _default;